class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0
        rows,cols=len(grid),len(grid[0])
        # to mark the cells visited
        visit= set() #can also use a 2-D grid
        islands=0
        
        def bfs(r,c): #iterative algorithm, need a DS for the memory
            q= collections.deque()
            visit.add((r,c))
            q.append((r,c))
            while q:
                row,col= q.popleft()   #USING POP() HERE WILL BE THE DFS SOLUTION TO THIS PROBLEM
                directions=[[0,1],[0,-1],[1,0],[-1,0]]
                for dr,dc in directions:
                    curr_row,curr_col=row+dr,col+dc
                    if(curr_row in range(rows)
                      and curr_col in range(cols)
                      and grid[curr_row][curr_col]=='1'
                      and (curr_row,curr_col) not in visit):
                        q.append((curr_row,curr_col))
                        visit.add((curr_row,curr_col)) 
            
        #visit every single position in the grid
        for r in range(rows):
            for c in range(cols):
                if grid[r][c]=="1" and (r,c) not in visit:
                    #traverse and mark it visited
                    bfs(r,c)
                    islands+=1
        return islands
