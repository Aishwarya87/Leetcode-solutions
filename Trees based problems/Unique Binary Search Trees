Multiplication: gotten number of combinations.
Dymanic Problem
Time complexity: O(n^2)
Space : O(N)
Catalan Numbers
C(2)= C0C1+C1C0
C(3)=C0C2+C2C0+C1C1
C(4)=C0C3+C3C0+C1C2+C2C1

C(N)= C0CN-1 + C1 CN-2 
Middle element= Ci Cn-i-1


class Solution:
    def numTrees(self, n: int) -> int:
        c=[0] * (n+1)
        c[0]=1
        c[1]=1
        for i in range(2,n+1):
            for j in range(0,i):
                c[i]+=c[j]*c[i-j-1]
        return c[n]
