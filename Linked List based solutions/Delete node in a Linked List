To delete the entire node from the linked list, we need to have the head reference. 
The question only gives the node that has to be deleted and not the head reference. Therfore, we will copy the next values to the left side 
and delete the reference of the last node that actually contains the want to be deleted node.

The question promises that the node will not be the tail node so that it doesn't throw null pointer exception. 

If node had been a tail node, we can have if else checks, and assign the node to null so that the node previous to it points
to null, hence deleted. 

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def deleteNode(self, node):
        """
        :type node: ListNode
        :rtype: void Do not return anything, modify node in-place instead.
        """
        node.val= node.next.val
        node.next= node.next.next
