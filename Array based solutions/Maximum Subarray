Brute Force = TIME COMPLEXITY = O(N^3)= First loop:0-n-1 , Second loop= i --n-1, third loop, ranging from i to j 
[-2,1,0,4,-1]: Compute every single subarray(for every number in the array) and compare for the maximum sum.

Optimized: sliding window, with two pointers, linear time complexity: O(N)
Strategy: remove negative prefix, Space complexity: O(1)

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        if len(nums)==1:
            return nums[0]
        cursum=0
        maxsum=float('-inf')
        for i in nums:
            
            if cursum<0:
                cursum=0
            cursum=cursum+i
            maxsum=max(cursum,maxsum)
        return maxsum
